%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 8.0.1%%For: (Annick  Baril) (Anngraphick inc)%%Title: (Varennes logo CV 3 coul.)%%CreationDate: (2/17/00) (10:16 PM)%%BoundingBox: 196 321 424 486%%HiResBoundingBox: 196.7964 321.8008 423.8027 485.7124%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%DocumentCustomColors: (PANTONE 131 CV)%%+ (PANTONE 548 CV)%%CMYKCustomColor: 0 0.27 1 0.09 (PANTONE 131 CV)%%+ 1 0.18 0 0.65 (PANTONE 548 CV)%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 0 0 552 728%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 612 792%AI5_RulerUnits: 0%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -46.5 668.5 1.5 1018 725 18 0 1 3 40 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%%AI3_PaperRect:-30 761 582 -31%%AI3_Margin:30 -33 -30 31%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI7_Thumbnail: 128 92 8%%BeginData: 9036 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C458453FD0CFFAF5384A8FD0EFFA859597DFD2DFFCFC9C8C8C8CFFD10%FFCFCFC8C8C8FD11FFC9C8C9FFA92E2E7DFD0BFF7D2E05537DFD0DFF8452%05052E7DA8FD23FFA7C99FC09EC69EC9CAFD0EFFCFA6C79EC0A5CFFD0EFF%CACEA6C79EC9CFFD04FF7D280584FD0BFF84050605537DFD0DFF52060506%057DA8FD1CFFCFC8C79EC69EC69EC7C9FD0DFFCFCE9FC69EC69ECEFD0EFF%CAC9C7C69EC7C8FD08FFA82E000659FD0BFF5905000505527DFD0BFFA859%050500050559A8FD16FFCFA6C79EC09EC09EC09FCFFD0CFFCAC89EC09EC0%9EC7C9FD0DFFA7C89EC09EC09EC9FD0CFF840506057EFD0AFFA859050605%06057DA8FD0AFFAF2E06050605062E84FD12FFC9C79EC6C0C69EC6C0C8CF%FD0BFFCFCEC1C69EC6C0C6C8CFFD0CFFCFC89EC6C0C69EC7C9FD10FF2E05%050659FD0AFFA8FD06052EA8FD0AFF842EFD05052853FD0DFFCAC89EC69E%C09EC69EC0A5FD0BFFCACE9FC09EC69EC09EC8CAFD0BFFCFC99EC69EC09E%C69EC9FD13FF59060506057DA9FD09FF592805060506055384FD0AFF7D05%060506050659FD0AFFCF9FC69EC69EC69EC69EC8CFFD0BFFC8C79EC69EC6%9EC6C8FD0CFFCFC8C69EC69EC69EC7C8FD16FFA82E000505287DFD09FFA8%2E000505050005057EFD0AFF2E05000684FD09FFA7C79EC09EC09EC09EC0%9FCFFD0AFFC9C79EC09EC09EC09EC8A8FD0BFFA7C79EC09EC09EC09EC8CF%FD19FF59050605062EA8FD09FFA80506050605060553A8FD09FF8459FD0A%FFC7C6C0C69EC6C0C69EC7C9FD0AFFCFC7C69EC6C0C69EC6C7CFFD0AFFCF%C99EC6C0C69EC6C0C6C7FD1DFF84FD050552A8FD09FF2EFD07052EAFFD10%FFCAC99EC09EC69EC09EC69EC8CAFD09FFC9C79EC69EC09EC69EC7A7FD0A%FFCFA5C69EC09EC69EC09EC7C9FD1FFFAF2806050605287DFD09FF7D2805%06050605060559A9FD0DFFCAC79EC69EC69EC69EC69ECFFD09FFCF9FC69E%C69EC69EC69ECEFD0AFFCFC89EC69EC69EC69EC6C0CEFD23FF2E0500FD04%05A8FD08FFA82E00050505000505057DFD0BFFA6C09EC09EC09EC09EC0A5%FD09FFA8C89EC09EC09EC09EC09FCFFD0AFFA5C09EC09EC09EC09EC0A6FD%26FF7D0605060506057DFD09FF7E050605060506050659FD08FFCF9FC6C0%C69EC6C0C69EC7C9FD09FFC8C7C0C69EC6C0C69EC7CFFD0AFFCEC0C69EC6%C0C69EC6C0C8CFFD28FFA82EFD05052EA8FD08FFA8FD06052EFD08FFC99E%C09EC69EC09EC69EC7CAFD08FFCF9EC09EC69EC09EC69EC8CAFD09FFC8C0%9EC69EC09EC69EC09EC9FD2BFFA92E05060506050659FD09FF2806050653%FD08FFC89EC69EC69EC69EC69EC9FD09FFC89EC69EC69EC69EC69ECFFD09%FFCF9EC69EC69EC69EC69EC6C7FD2FFF59050500FD0405FD09FF2E052EFD%07FFA8C79EC09EC09EC09EC09EC9FD08FFA7C79EC09EC09EC09EC0A6FD09%FFA8C89EC09EC09EC09EC09EC0A7FD31FF840506050605060584FD08FFA8%FD07FFCFC7C0C69EC6C0C69EC6C7CFFD08FFC8C6C0C69EC6C0C69EC7C9FD%09FFC9C7C0C69EC6C0C69EC6C0C8FD34FFA8FD070553A8FD0DFFCAC09EC6%9EC09EC69EC09FFD08FFCF9FC09EC69EC09EC69EC7CAFD08FFCF9FC09EC6%9EC09EC69EC09ECFFD36FFA9050605060506052EA8FD0BFFC9C79EC69EC6%9EC69EC6C8FD08FFCE9EC69EC69EC69EC69ECEFD09FFC99EC69EC69EC69E%C69EC6C7FD3AFFFD0405000505057DFD09FFA7C09EC09EC09EC09EC0A6FD%08FFC89EC09EC09EC09EC09ECFFD08FFA8C79EC09EC09EC09EC09EC0A7FD%3CFF2E0605060506050659FD08FFC89EC6C0C69EC6C0C6C9FD08FFC7C0C6%9EC6C0C69EC6C7FD09FFC9C7C0C69EC6C0C69EC6C0C7CFFD3EFF52FD0705%2EFD08FFC99EC69EC09EC6C9FD07FFCAC79EC69EC09EC69EC0A5FD09FFA5%C09EC69EC09EC69EC09EC9FD41FF530605060506050628FD08FFCE9EC69E%C6C9FD07FFC9C79EC69EC69EC69EC6C8FD08FFCF9EC69EC69EC69EC69EC6%C0CFFD43FF590500050505000505A8FD07FFC99EC0A7FD07FFA7C09EC09E%C09EC09EC0A7FD08FFC99EC09EC09EC09EC09EC09FFD46FF7D0605060506%050605A9FD07FFCFC9FD07FFC9C69EC6C0C69EC6C0C7CFFD08FFC8C0C69E%C6C0C69EC6C0C6C8FD48FF7DFD080584FD0EFFA6C69EC09EC69EC09EC7CA%FD07FFCAC79EC69EC09EC69EC09EC6C9FD4AFF7D060506050605060584FD%0CFFC8C69EC69EC69EC69EC7CFFD07FFC9C79EC69EC69EC69EC69EC7CAFD%4CFF7D05050500050505007DFD0AFF9FC09EC09EC09EC09EC7CFFD07FFA7%C09EC09EC09EC09EC09EC8CFFD4EFF7D060506050605060559FD08FFC8C6%C0C69EC6C0C69EC7FD08FFC8C69EC6C0C69EC6C0C69ECEFD51FF7DFD0805%53FD07FFC99EC69EC09EC69EC7CAFD07FFA5C69EC09EC69EC09EC69EC9FD%53FF7D060506050605060559FD07FFCE9EC69EC69EC7FD08FFC7C69EC69E%C69EC69EC69ECFFD55FF7D050005050500050553FD07FFC89EC09EC7A8FD%07FF9EC09EC09EC09EC09EC09FCFFD57FF7D060506050605060584FD07FF%C8C0C7FD08FF9FC6C0C69EC6C0C69EC6C7FD5AFF7DFD080584FD07FFC8CF%FD07FF9FC09EC69EC09EC69EC0A5FD5CFF52060506050605060584FD0EFF%9FC69EC69EC69EC69EC6C8FD5EFF2E0505050005050500A8FD0CFF9FC09E%C09EC09EC09EC0A6FD60FF2E0605060506050605AFFD0AFFC7C69EC6C0C6%9EC6C0C6C9FD07FFA82EFD59FF28FD0805FD09FF9EC69EC09EC69EC09EC6%C9FD07FFA805057DFD59FF060605060506050628FD07FFC8C69EC69EC69E%C69EC6C9FD07FF7D28050605FD59FFA805050005050500052EFD07FF9EC0%9EC09EC09EC6C9FD07FF7D050005050559FD59FFA8050605060506050659%FD06FFCF9EC6C0C69EC7CFFD08FF0605060506052EFD5AFF7EFD08057DFD%06FFC99EC69EC0CAFD09FF59FD060584FD5AFF590506050605060528A8FD%06FFC79EC6CAFD0BFF05060506052EA9FD5BFF2E000505050005052EA8FD%05FFCFC0A7FD0CFF7D0505002EA8FD5DFF2E0506050605060559FD0EFF7D%FD06FF280559FD5FFFA806FD0705A8FD0CFF52057DFD05FF5953FD61FF7D%0605060506050605FD0BFF5206052EFD69FF2E0505050005050528FD09FF%2E050005057EFD69FF2E0605060506050659FD07FF53060506050605FD6A%FFFD0805A8FD05FFA8FD07057DFD69FFA8050605060506052EFD06FF5906%050605060559FD6AFF59050500050505007DFD06FFFD04050059FD6CFF2E%05060506050605AFFD05FFA805060559FD6DFFA8FD07052EFD06FF2E0553%FD6FFF7D060506050605067DFD05FFA859FD71FF2805000505050006A8FD%78FF0506050605060559FD78FF7EFD0705A8FD78FF530506050605062EFD%78FFA805000505050005A8FD78FF7D06050605067DFD7AFF2805050553FD%7CFF050653FD7DFF5905FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFC%FFFDD4FFA8FD07FF7DFD05F827FD04FF7DF8F8F827FD04FF52F8FD09FF7D%27F8F8F8FD042752A8FD06FF27F8F8F8272727F8F8F827FD04FF27FD04F8%27FD05FF7DF8F8F827FFFFFFFD05F87DFD05FF27F8F8F852FFFF52F8F8F8%FD0427F8F8F8A8FD05FF7D27F87D272727F87DFD04FFF8F8F87DFD06FF7D%F87DFD04FF7DF8F87DFD0AFF27F8F8FFFFFF7DF8F87DFD06FF52F8F8A8FF%FFFFA852F8A8FD04FFA8FD04F852FD06FF2752FD05FF52FD04F8A8FD05FF%A8F8A8FD04FF7DF8F852FD04FF7DF87DFD04FF7DF852FFFFFF7DF8F8A8FD%04FF7DF8F8F8FD06FF7D27FD05FF27F8F827FD0AFF27F8F8FD04FF27F8F8%A8FD05FF27F8F8A8FD05FF5227FD05FFF87DF8F8F87DFD05FF7D52FD05FF%525227F8F8F8A8FD05FFF8FD05FF7DF8F87DFD05FF7DF8FD04FF27F8A8FD%04FF52F87DFD05FF27F8F87DFD05FFF8A8FD05FF27F8F8F8A8FD09FF52F8%F8FD04FF52F8F8A8FD05FF52F8F87DFFFFFFA8A8FF52FD05FFF8FF52F8F8%F87DFD04FF527DFD05FF7D52FF27F8F827FD05FFF8FD05FFA8F8F852FD04%FF7DFF7DA8FFFFFFF8F827FD05FFF8A8FD05FF7DF8F827FD04FF7D27FD05%FF7D2752F8F827FD09FF27F8F8FD04FF52F8F87DFD05FF27F8F8A8FFFFFF%5252FD07FFF8FFFF52F8F8F87DFFFFFF5252FD05FF5252FFFFF8F8F827A8%FFFFFFF8FD05FF7DF8F852FFFFFFA827FD06FF27F8F8F852A8FFFF52A8FD%06FFF8F8F87DFFFFFF527DFD05FF27FFFF27F8F8A8FD08FF52F8F8FFFFFF%7DF8F827FD06FF52F8F8A8FFFF7DF87DFD07FFF8FFFFFF52F8F8F8FFFFFF%527DFD05FF7D52FFFFA8F8F8F852FFFFFFF8FD05FFA8F8F852FFFFA8F852%FD06FF7DFD05F827A8FD08FF7DF8F827FFFFA8F8FD05FF7D27FFFF52F8F8%27FD08FF27F8F82727F8F82752FD07FF27F8F827FD04F852FD07FFF8FFFF%FFA827F8F8F8FFFF7D52FD05FF527DFFFFFFA8F8F8F852FFFFF8FD05FF7D%F8F82727F8F8F827FD07FF52FD06F852FD08FF27F8F8A8FF277DFD05FF27%7DFFFFFFF8F8F8A8FD07FF27F8F8FFA8F8F8F8A8FD07FF27F8F8A8FFFF7D%F87DFD07FFF8FD04FFA827F8F827FF527DFD05FF7D52FD04FF7DF8F8F852%FFF8FD05FFA8F8F852FFFFA82727FD08FFA852FD05F87DFD07FF52F8F827%A827FD05FFA8F852527D5227F8F827FD07FF27F8F8FFFFA8F8F8F8FD07FF%27F8F8A8FFFFFF7D52FD07FFF8FD05FFA8FD04F87D52FD05FF527DFD05FF%7DF8F8F87DF8FD05FF7DF8F87DFFFFFFA827FD0BFF52FD04F8FD08FFF8F8%F8277DFD05FF5252527D527D5227F8F8A8FD06FF52F8F8FFFFFF52F8F852%FD06FF52F8F8A8FFFFFFA87DFFA8A8FD04FFF8FD06FFA827F8F8F87DFD05%FF7D52FD06FF52FD04F8FD05FFA8F8F852FD04FF52FFFF7DFFFFFF27FD06%FF27F8F8FD08FF7DF8F8F8FD05FFA8F8A8FD05FF52F8F852FD06FF27F8F8%FFFFFF7DF8F8F8A8FD05FF27F8F8A8FD05FFA8F8FD05FFF8FD07FF7DF8F8%F852FD05FF527DFD07FF52F8F8F8FD05FF7DF8F87DFD06FFF87DFFFFFF27%52FD05FF7DF8F8FD09FF27F87DFD05FF5252FD07FFF8F8F8A8FD05FF27F8%F8FD04FF27F8F827FD05FF52F8F87DFD04FFA8F827FD04FFA8F8FD08FF7D%F8F87DFD05FF5252FD08FF27F8F8FD05FF7DF8F852FD05FF27F8A8FFFFFF%27F87DFD04FF7DF87DFD09FF52F8A8FFFFFF7D27F82752FD04FFA852FD04%F852FFFF7D52F8F8F8527DFFFFA8F8F8F8527DFFFF52F8F8F827527D5252%F8F852FFFFFF7D27F82752FD07FF52F852FFFFFFA852F8F827A8FD06FFA8%27F8FD04FF7DFD04F8527D5252F8F8F8FD04FF27F8F852A87D52F827A8FF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration]) Pc0 g(K=100) Pc(K=100) Pc0 0.27 1 0.09 (PANTONE 131 CV) 0 x(PANTONE 131 CV) Pc1 0.18 0 0.65 (PANTONE 548 CV) 0 x(PANTONE 548 CV) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Undo New Calligraphic Brush) (Calligraphic Brush Tool)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 100 Lb(Layer 1) Ln0 A0 O1 0.18 0 0.65 (PANTONE 548 CV) 0 x800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR340.2813 404.1958 m342.8584 406.6499 345.4756 409.061 348.127 411.436 C346.6602 414.8896 345.0439 418.2646 343.2822 421.5498 C340.5273 419.1343 337.8096 416.6787 335.1328 414.1792 C336.9609 410.9194 338.6777 407.5894 340.2813 404.1958 Cf327.3818 406.7744 m324.5693 403.9814 321.8057 401.1401 319.0889 398.2529 C321.0781 395.082 322.9941 391.8604 324.8359 388.5918 C327.3789 391.3379 329.9668 394.041 332.5957 396.7046 C330.9746 400.1304 329.2314 403.4858 327.3818 406.7744 Cf0 0.27 1 0.09 (PANTONE 131 CV) 0 x423.8027 485.3384 m377.5625 475.4092 336.6895 451.0674 305.875 417.4375 C308.4375 414.1523 310.6729 411.1079 313.0625 407.6875 C344.2793 440.3345 381.957 466.7559 423.8027 485.3384 Cf388.4795 485.4365 m350.4902 479.5415 316.6641 461.0698 291.3721 434.4194 C293.9424 431.6895 296.4473 428.8975 298.8872 426.0483 C323.2539 452.5137 353.9053 473.103 388.4795 485.4365 Cf350.1416 485.3032 m320.915 482.8042 294.7109 469.7207 275.3721 449.9077 C278.2422 447.3784 281.0518 444.7817 283.7964 442.1187 C302.0264 461.3091 324.6865 476.252 350.1416 485.3032 Cfu1 0.18 0 0.65 (PANTONE 548 CV) 0 x274.0166 463.5342 m258.52 473.5625 241.2061 481.0215 222.6709 485.2949 C238.5557 477.4624 253.4355 467.9038 267.0723 456.8701 C269.2954 459.1846 271.6138 461.4058 274.0166 463.5342 Cf254.0347 485.4805 m264.1206 481.4355 273.4727 476.271 282.4375 470.375 C284.3198 471.7524 286.4736 473.2954 288.4375 474.5625 C277.7437 479.8105 266.187 483.4883 254.0347 485.4805 Cf196.7964 485.7124 m242.9683 457.1841 281.9736 418.1719 310.5 372 C312.8027 374.8223 315.1465 377.6094 317.5352 380.3564 C290.834 428.0313 248.1812 465.5645 196.7964 485.7124 CfU*u0 g213.5 321.8008 m212.8994 321.8008 L203.4463 341.3066 L202.3081 343.6777 201.7388 344.4053 199.5576 344.4053 c199.5576 345.2598 L210.623 345.2598 L210.623 344.4053 L208.4414 344.4053 207.6509 344.1846 207.6509 343.6152 c207.6509 343.3936 207.7778 343.1094 207.9355 342.7617 c215.0806 327.7754 L220.835 340.3271 L221.4355 341.623 221.7832 342.6035 221.7832 342.8887 c221.7832 344.1846 220.5503 344.3418 219.5386 344.4053 c219.5386 345.2598 L226.4307 345.2598 L226.4307 344.4053 L224.439 344.1523 223.5537 343.2988 222.7319 341.5283 C213.5 321.8008 lf*U*u222.9209 322.2432 m222.9209 323.0967 L225.4185 323.6338 226.019 324.6143 227.6001 328.1543 c233.5439 341.4023 L233.3857 341.8125 233.1958 342.3184 232.8799 342.4453 c233.9229 343.3311 234.998 344.248 235.8516 345.3535 c236.0728 345.6387 236.168 345.7021 236.2944 345.7021 c236.4521 345.7021 236.5156 345.6064 236.8003 345.0381 c246.3164 325.4043 L247.2017 323.5391 247.8975 323.2861 249.8574 323.0967 c249.8574 322.2432 L238.7285 322.2432 L238.7285 323.0967 L240.9102 323.0967 241.5425 323.6338 241.5425 324.3926 c241.5425 325.0889 240.9102 326.1631 240.6255 326.7324 c239.4561 329.1035 L229.2754 329.1035 L228.2954 326.7637 L227.8843 325.8154 227.5684 324.835 227.5684 324.4561 c227.5684 323.6338 228.4536 323.0967 230.3188 323.0967 c230.3188 322.2432 L222.9209 322.2432 lf1 D229.6865 330.21 m238.8237 330.21 L234.1128 340.043 L229.6865 330.21 lf*U*u0 D257.6348 341.4023 m257.6348 344.1211 257.3501 344.374 254.8525 344.4053 c254.8525 345.2598 L264.4639 345.2598 L271.9883 345.2598 275.2134 342.6035 275.2134 338.5566 c275.2134 335.6162 272.4312 334.1934 269.8701 333.9404 c269.8701 333.8457 L270.3125 333.6563 270.7236 333.4033 270.9766 332.9922 c276.3198 324.2656 L276.6992 323.665 277.1733 323.0967 279.3867 323.0967 c279.3867 322.2432 L271.8936 322.2432 L267.3726 331.0957 L266.6768 332.4863 266.0444 333.4346 264.9063 333.4346 c262.2188 333.4346 L262.2188 326.0996 L262.2188 323.3809 262.5034 323.1279 265.4121 323.0967 c265.4121 322.2432 L254.8525 322.2432 L254.8525 323.0967 L257.3501 323.1279 257.6348 323.3809 257.6348 326.0996 C257.6348 341.4023 lf1 D262.2188 334.2891 m264.4639 334.2891 L268.3843 334.3516 270.5342 335.8691 270.5342 339.3477 c270.5342 342.8242 268.3843 344.4053 264.4639 344.4053 c262.2188 344.4053 L262.2188 334.2891 lf*U*u0 D286.2974 341.4023 m286.2974 344.1211 286.0127 344.374 283.9575 344.4053 c283.9575 345.2598 L302.4214 345.2598 L304.8242 339.2207 L304.2549 338.999 L301.3779 342.6035 299.481 344.4053 296.0664 344.4053 c290.8813 344.4053 L290.8813 334.541 L292.7153 334.541 L295.9087 334.541 299.165 335.585 299.5127 339.1895 c300.2715 339.1895 L300.2715 328.4707 L299.5127 328.4707 L299.165 332.0439 297.4575 333.6875 292.7153 333.6875 c290.8813 333.6875 L290.8813 324.6455 L290.8813 323.4121 290.9761 323.0967 292.083 323.0967 c295.4023 323.0967 L300.6509 323.0967 301.7256 324.8037 304.666 328.9141 c305.3618 328.5342 L303.5908 322.2432 L283.9575 322.2432 L283.9575 323.0967 L286.0127 323.1279 286.2974 323.3809 286.2974 326.0996 C286.2974 341.4023 lf*U*u315.2227 326.0684 m315.2227 323.792 316.8027 323.0967 318.8896 323.0967 c318.8896 322.2432 L310.9229 322.2432 L310.9229 323.0967 L312.915 323.2227 314.0215 324.1719 314.0215 326.0684 c314.0215 343.2988 L314.0215 344.3105 311.7764 344.3418 311.0811 344.4053 c311.0811 345.2598 L319.585 345.2598 L334.4141 328.4395 L334.4141 341.4336 L334.4141 343.9004 333.4336 344.4053 330.8408 344.4053 c330.8408 345.2598 L338.5869 345.2598 L338.5869 344.4053 L336.3418 344.4053 335.6143 343.9941 335.6143 341.4336 c335.6143 321.8008 L334.3496 321.8008 L315.3174 343.1094 L315.2227 343.1094 L315.2227 326.0684 lf*U*u348.2275 326.0684 m348.2275 323.792 349.8086 323.0967 351.8945 323.0967 c351.8945 322.2432 L343.9277 322.2432 L343.9277 323.0967 L345.9189 323.2227 347.0264 324.1719 347.0264 326.0684 c347.0264 343.2988 L347.0264 344.3105 344.7813 344.3418 344.085 344.4053 c344.085 345.2598 L352.5898 345.2598 L367.418 328.4395 L367.418 341.4336 L367.418 343.9004 366.4375 344.4053 363.8457 344.4053 c363.8457 345.2598 L371.5918 345.2598 L371.5918 344.4053 L369.3467 344.4053 368.6191 343.9941 368.6191 341.4336 c368.6191 321.8008 L367.3555 321.8008 L348.3223 343.1094 L348.2275 343.1094 L348.2275 326.0684 lf*U*u379.0742 341.4023 m379.0742 344.1211 378.79 344.374 376.7344 344.4053 c376.7344 345.2598 L395.1982 345.2598 L397.6016 339.2207 L397.0313 338.999 L394.1543 342.6035 392.2578 344.4053 388.8438 344.4053 c383.6582 344.4053 L383.6582 334.541 L385.4922 334.541 L388.6855 334.541 391.9414 335.585 392.29 339.1895 c393.0479 339.1895 L393.0479 328.4707 L392.29 328.4707 L391.9414 332.0439 390.2344 333.6875 385.4922 333.6875 c383.6582 333.6875 L383.6582 324.6455 L383.6582 323.4121 383.7529 323.0967 384.8604 323.0967 c388.1797 323.0967 L393.4277 323.0967 394.5029 324.8037 397.4434 328.9141 c398.1387 328.5342 L396.3682 322.2432 L376.7344 322.2432 L376.7344 323.0967 L378.79 323.1279 379.0742 323.3809 379.0742 326.0996 C379.0742 341.4023 lf*U*u420.2979 337.5449 m419.5078 337.5449 L418.5273 340.8018 415.9668 344.8477 412.1094 344.8477 c410.1494 344.8477 407.9678 343.71 407.9678 341.4336 c407.9678 338.7461 411.4141 337.7031 414.8916 336.2803 c418.3379 334.8896 421.7842 333.1191 421.7842 329.0088 c421.7842 323.5068 418.085 321.8008 413.0586 321.8008 c411.8252 321.8008 410.4971 322.0527 409.3594 322.2744 c408.252 322.5273 407.335 322.7803 406.9883 322.7803 c406.6084 322.7803 406.0703 322.2744 405.6914 321.8633 c404.7432 321.8633 L404.7432 329.957 L405.4385 329.957 L406.9883 326.0684 408.8525 322.6543 413.0586 322.6543 c415.7139 322.6543 418.3379 323.9502 418.3379 326.3525 c418.3379 329.4824 414.9229 330.5898 411.54 331.9805 c408.126 333.3721 404.7109 335.0156 404.7109 339.2207 c404.7109 343.3936 408.2207 345.7021 412.0469 345.7021 c413.5645 345.7021 414.8916 345.417 415.9033 345.1016 c416.915 344.8164 417.6426 344.5 417.959 344.5 c418.5908 344.5 419.2861 345.0059 419.6025 345.5117 c420.2979 345.5117 L420.2979 337.5449 lf*ULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF